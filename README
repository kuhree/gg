# GG (Go Game Engine)

GG is a bunch of classic games written in Go. It's designed to create classic arcade-style games using ASCII characters for rendering.

## Features

- Fixed timestep for core gameplay logic, physics, and collision detection
- Time-based calculations for rendering and animations
- Support for multiple game states (Main Menu, Gameplay, Pause, Game Over)
- Customizable game elements (levels, player, camera, AI enemies, NPCs, obstacles, weapons, power-ups)
- Dev mode with extra features like:
  - Performance metrics (FPS)
  - Debug information overlay
  - Entity bounding box visualization
  - Collision detection visualization
  - Game state inspector
  - Slow motion and frame-by-frame stepping

## Implemented Games

The `examples/` directory contains implementations of classic 2D games, including:

1. Space Invaders
2. ???

> \*Not yet implemented

## Project Goals

- Implement multiple classic arcade games
- Create a full game experience (gameplay loop, start screen, pause functionality, settings, high score/leaderboards etc.)
- Minimize dependencies

## Getting Started

[Add instructions for setting up and running the project]

## Usage

The game launcher can be used in the following ways:

- `gg`: Launch a menu to choose games
- `gg [game]`: Launch directly into a specific game
- `--debug`: Enable Debug logging

While in game:

- Use arrow keys or WASD for movement
- Spacebar for primary action (shoot, jump, etc.)
- 'P' to pause the game
- 'ESC/Q' to pause/quit the current game 
- 'F1' to toggle dev modez
- 'F2' to toggle dev overlays

In dev mode:

- 'F2' to toggle performance metrics display
- 'F3' to toggle debug information overlay
- 'F4' to toggle entity bounding box visualization
- 'F5' to toggle collision detection visualization
- 'F6' to open the game state inspector
- '[' and ']' to adjust game speed (slow motion / speed up)
- ',' and '.' for frame-by-frame stepping (when paused)

For game-specific controls and instructions, refer to the in-game help menu or the individual game's documentation in the `games/` directory.

## Architecture

The GG (Go Game Engine) project follows a modular architecture designed for maintainability, extensibility, and ease of use. Here's an overview of the project structure:

```
gg/
├── cmd/
│   └── gg/
│       └── main.go
├── internal/
│   ├── engine/
│   │   ├── core/
│   │   │   ├── game.go
│   │   │   ├── state.go
│   │   │   └── loop.go
│   │   ├── input/
│   │   │   └── input.go
│   │   ├── render/
│   │   │   └── renderer.go
│   │   ├── physics/
│   │   │   ├── collision.go
│   │   │   └── physics.go
│   │   ├── audio/
│   │   │   └── audio.go
│   │   └── debug/
│   │       └── debug.go
│   ├── entities/
│   │   ├── player.go
│   │   ├── enemy.go
│   │   └── item.go
│   └── utils/
│       ├── math.go
│       └── logging.go
├── games/
│   ├── spaceinvaders/
│   │   └── game.go
│   ├── pong/
│   │   └── game.go
│   └── ...
├── assets/
│   ├── fonts/
│   └── sounds/
├── configs/
│   └── config.yaml
├── tests/
│   └── ...
├── docs/
│   └── ...
├── go.mod
├── go.sum
├── Makefile
└── README.md

```

### Key Components

1. **cmd/gg/**: Contains the main application entry point.

2. **internal/**: Houses the core engine components and game-specific code.

   - **engine/**: Core engine components.
     - **core/**: Central game loop, state management, etc.
     - **input/**: Input handling (keyboard, mouse, etc.).
     - **render/**: Rendering system for ASCII graphics.
     - **physics/**: Collision detection and physics calculations.
     - **audio/**: Sound system (if applicable for terminal-based games).
     - **debug/**: Debugging and development tools.
   - **entities/**: Common game entities that can be used across different games.
   - **utils/**: Utility functions and helpers.

3. **games/**: Individual game implementations using the engine.

4. **assets/**: Game assets like fonts or sound files (if applicable).

5. **configs/**: Configuration files.

6. **tests/**: Unit and integration tests.

7. **docs/**: Documentation files.

### Design Principles

- **Modularity**: Each package has a specific responsibility, promoting code organization and reusability.
- **Extensibility**: New features or games can be added without modifying existing code.
- **Encapsulation**: The `internal/` directory prevents external projects from importing and depending on the engine's internal implementation details.
- **Testability**: The modular structure facilitates writing and running tests for individual components.

### Best Practices

- Use interfaces to allow for easy mocking in tests and to provide flexibility in implementation details.
- Implement dependency injection to manage relationships between different components of the engine.
- Follow Go's standard naming conventions and package structure guidelines.
- Write comprehensive unit tests for each package.
- Document public APIs and important implementation details.

### Adding a New Game

To add a new game:

1. Create a new directory under `games/` with your game's name.
2. Implement your game logic in a `game.go` file within this directory.
3. Use the engine components from the `internal/engine/` package to handle core functionality.
4. Add any game-specific assets to the `assets/` directory.
5. Update the main game launcher in `cmd/gg/main.go` to include your new game.

### Contributing

When contributing to the project, please ensure your code adheres to the existing architecture and follows the established design principles. Refer to the CONTRIBUTING.md file for more detailed guidelines on how to contribute to the project.

## Contributing

[Add information about how to contribute to the project]

## License

MIT License
